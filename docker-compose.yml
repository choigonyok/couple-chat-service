version: '3'
services:
  frontend:
    build:
      dockerfile: Dockerfile.dev
      context: ./frontend
    volumes:
      - /app/node_modules
      - ./frontend/:/app
    # 다 설정 마치고 react의 코드를 수정했는데 volumes가 적용되지 않았음
    # 이건 운영환경용 도커파일이어서 빌드된 이미지를 컨테이너화 하는 거라서
    # 이미 빌드된 이미지에 아무리 코드 수정을 한다고 한들
    # 코드가 바뀔리가 없었음
    # 그래서 개발환경용 도커파일을 따로 만들어서 거기서는 빌드하지 않고 npm run start로 하는 거였음!!
    # 대박, 그래서 백엔드와 프론트엔드 모두 Dockerfile.dev를 추가해서 작성해줬음
    stdin_open: true
    environment:
      - WDS_SOCKET_PORT=${WS_PORT}

  nginx:
    restart: no
    build:
      dockerfile: Dockerfile
      context: ./nginx
    ports:
      - "80:80"
      
  mysql:
    build: ./mysql
    restart: no
    ports:
      - "3306:3306"
    volumes:
      - ./mysql/mysql_data:/var/lib/mysql
      - ./mysql/sqls/:/docker-entrypoint-initdb.d/
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      # .env를 활용해 환경변수를 설정하고 
      # .env는 .gitignore로 공유저장소에 올라가지 않도록 설정
      TZ: Asia/Seoul

  backend:
    build:
      dockerfile: Dockerfile.dev
      # 안쓰면 Dockerfile만 읽음
      context: ./backend
      # docker-compose.yml파일의 directory 기준으로 상대경로 작성
    volumes:
      - ./backend/:/app
      # 오른쪽 : 컨테이너의 해당 디렉토리가, 왼쪽 : 호스트(로컬)의 해당 디렉토리를 참조하도록 함
      # 백엔드에선 go.mod나 go.sum을 node_modules처럼 제외시킬 필요가 없음
      # -> 클라이언트에서는 package.json으로 종속성을 다시 설치하는데, 서버에서는 로컬의 go.mod, go.sum을 카피해와서 사용하기 때문
      # CompileDaemon을 설치하고 빌드/실행 했다고해서 volumes을 안적어주면 데몬이 적용 안됨
    ports:
      - "8080:8080"
      # react는 이미지로 컨테이너 생성시 포트지정을 안해줘도 nginx가 3000을 listen하고 있어서
      # 실행이 가능한데 go는 그렇지 않아서 포트 지정을 해줘야함

# build는 docker-compose up
# 두 번째부터는 docker-compose up --build